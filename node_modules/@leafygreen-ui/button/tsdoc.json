[
  {
    "tags": {},
    "description": "Buttons allow users to take actions, and make choices, with a single tap.",
    "methods": [],
    "displayName": "Button",
    "props": {
      "ButtonProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": false
          },
          "description": "Determines whether the button element will be disabled.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": {
            "value": "`() => {}`"
          },
          "description": "Callback fired when the button is clicked",
          "required": false,
          "type": {
            "name": "MouseEventHandler<HTMLButtonElement>"
          },
          "tags": {
            "default": "`() => {}`"
          }
        },
        "type": {
          "name": "type",
          "defaultValue": {
            "value": "button"
          },
          "description": "Specifies the `type` property of the HTML button element",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {
            "default": "button"
          }
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Specifies a CSS class passed to the element.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "variant": {
          "name": "variant",
          "defaultValue": {
            "value": "default"
          },
          "description": "Sets the variant for the Button",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Variant",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"primary\""
              },
              {
                "value": "\"primaryOutline\""
              },
              {
                "value": "\"danger\""
              },
              {
                "value": "\"dangerOutline\""
              },
              {
                "value": "\"baseGreen\""
              }
            ]
          },
          "tags": {
            "default": "\"default\""
          }
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Determines if the component renders in dark mode",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": {
            "value": "BaseFontSize.Body1"
          },
          "description": "Determines the base font-size of the component",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {
            "default": "13"
          }
        },
        "size": {
          "name": "size",
          "defaultValue": {
            "value": "default"
          },
          "description": "Sets the size for the Button",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              },
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {
            "default": "\"default\""
          }
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "The content that will appear inside of the `<Button />` component.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "leftGlyph": {
          "name": "leftGlyph",
          "defaultValue": null,
          "description": "An icon glyph rendered before the button text.\nTo use a custom icon, see {@link Icon } {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/icon/README.md#usage-registering-custom-icon-sets | createIconComponent} docs",
          "required": false,
          "type": {
            "name": "Leafygreen <Icon /> Component"
          },
          "tags": {
            "type": "Leafygreen <Icon /> Component"
          }
        },
        "rightGlyph": {
          "name": "rightGlyph",
          "defaultValue": null,
          "description": "An icon glyph rendered after the button text.\nTo use a custom icon, see {@link Icon } {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/icon/README.md#usage-registering-custom-icon-sets | createIconComponent} docs",
          "required": false,
          "type": {
            "name": "Leafygreen <Icon /> Component"
          },
          "tags": {
            "type": "Leafygreen <Icon /> Component"
          }
        },
        "href": {
          "name": "href",
          "defaultValue": null,
          "description": "A `href` prop that will make the Button render as an anchor tag.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "isLoading": {
          "name": "isLoading",
          "defaultValue": {
            "value": false
          },
          "description": "Indicates whether the Button is in a loading state",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "loadingText": {
          "name": "loadingText",
          "defaultValue": null,
          "description": "String displayed in place of `children` while the button is in a loading state",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "loadingIndicator": {
          "name": "loadingIndicator",
          "defaultValue": null,
          "description": "Visual indicator display to convey that component is loading.",
          "required": false,
          "type": {
            "name": "ReactElement<any, string | JSXElementConstructor<any>>"
          },
          "tags": {}
        },
        "as": {
          "name": "as",
          "defaultValue": {
            "value": "button"
          },
          "description": "The component or HTML Element that the button is rendered as.\n\nTo use with NextJS Links, pass in a component that wraps the Link:\n```js\nconst Linker = ({ href, children, ...props }) => (\n <NextLink href={href}>\n   <a {...props}>{children}</a>\n </NextLink>\n);\n<Button as={Linker} />\n```",
          "required": false,
          "type": {
            "name": "HTMLElement | React.Component"
          },
          "tags": {
            "type": "HTMLElement | React.Component",
            "default": "button"
          }
        }
      },
      "LgIdProps": {
        "data-lgid": {
          "name": "data-lgid",
          "defaultValue": null,
          "description": "LG test id passed to the component wrapper.",
          "required": false,
          "type": {
            "name": "`lg-${string}`"
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AnchorHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "ButtonHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"
    }
  },
  {
    "tags": {},
    "description": "Buttons allow users to take actions, and make choices, with a single tap.",
    "methods": [],
    "displayName": "LeafygreenUiButton",
    "props": {
      "ButtonProps": {
        "disabled": {
          "name": "disabled",
          "defaultValue": {
            "value": false
          },
          "description": "Determines whether the button element will be disabled.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "onClick": {
          "name": "onClick",
          "defaultValue": {
            "value": "`() => {}`"
          },
          "description": "Callback fired when the button is clicked",
          "required": false,
          "type": {
            "name": "MouseEventHandler<HTMLButtonElement>"
          },
          "tags": {
            "default": "`() => {}`"
          }
        },
        "type": {
          "name": "type",
          "defaultValue": {
            "value": "button"
          },
          "description": "Specifies the `type` property of the HTML button element",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {
            "default": "button"
          }
        },
        "className": {
          "name": "className",
          "defaultValue": null,
          "description": "Specifies a CSS class passed to the element.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "variant": {
          "name": "variant",
          "defaultValue": {
            "value": "default"
          },
          "description": "Sets the variant for the Button",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Variant",
            "value": [
              {
                "value": "\"default\""
              },
              {
                "value": "\"primary\""
              },
              {
                "value": "\"primaryOutline\""
              },
              {
                "value": "\"danger\""
              },
              {
                "value": "\"dangerOutline\""
              },
              {
                "value": "\"baseGreen\""
              }
            ]
          },
          "tags": {
            "default": "\"default\""
          }
        },
        "darkMode": {
          "name": "darkMode",
          "defaultValue": {
            "value": "false"
          },
          "description": "Determines if the component renders in dark mode",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {
            "default": "false"
          }
        },
        "baseFontSize": {
          "name": "baseFontSize",
          "defaultValue": {
            "value": "BaseFontSize.Body1"
          },
          "description": "Determines the base font-size of the component",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "BaseFontSize",
            "value": [
              {
                "value": "13"
              },
              {
                "value": "16"
              }
            ]
          },
          "tags": {
            "default": "13"
          }
        },
        "size": {
          "name": "size",
          "defaultValue": {
            "value": "default"
          },
          "description": "Sets the size for the Button",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "Size",
            "value": [
              {
                "value": "\"small\""
              },
              {
                "value": "\"default\""
              },
              {
                "value": "\"xsmall\""
              },
              {
                "value": "\"large\""
              }
            ]
          },
          "tags": {
            "default": "\"default\""
          }
        },
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "The content that will appear inside of the `<Button />` component.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "leftGlyph": {
          "name": "leftGlyph",
          "defaultValue": null,
          "description": "An icon glyph rendered before the button text.\nTo use a custom icon, see {@link Icon } {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/icon/README.md#usage-registering-custom-icon-sets | createIconComponent} docs",
          "required": false,
          "type": {
            "name": "Leafygreen <Icon /> Component"
          },
          "tags": {
            "type": "Leafygreen <Icon /> Component"
          }
        },
        "rightGlyph": {
          "name": "rightGlyph",
          "defaultValue": null,
          "description": "An icon glyph rendered after the button text.\nTo use a custom icon, see {@link Icon } {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/icon/README.md#usage-registering-custom-icon-sets | createIconComponent} docs",
          "required": false,
          "type": {
            "name": "Leafygreen <Icon /> Component"
          },
          "tags": {
            "type": "Leafygreen <Icon /> Component"
          }
        },
        "href": {
          "name": "href",
          "defaultValue": null,
          "description": "A `href` prop that will make the Button render as an anchor tag.",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "isLoading": {
          "name": "isLoading",
          "defaultValue": {
            "value": false
          },
          "description": "Indicates whether the Button is in a loading state",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "boolean",
            "value": [
              {
                "value": "false"
              },
              {
                "value": "true"
              }
            ]
          },
          "tags": {}
        },
        "loadingText": {
          "name": "loadingText",
          "defaultValue": null,
          "description": "String displayed in place of `children` while the button is in a loading state",
          "required": false,
          "type": {
            "name": "string"
          },
          "tags": {}
        },
        "loadingIndicator": {
          "name": "loadingIndicator",
          "defaultValue": null,
          "description": "Visual indicator display to convey that component is loading.",
          "required": false,
          "type": {
            "name": "ReactElement<any, string | JSXElementConstructor<any>>"
          },
          "tags": {}
        },
        "as": {
          "name": "as",
          "defaultValue": {
            "value": "button"
          },
          "description": "The component or HTML Element that the button is rendered as.\n\nTo use with NextJS Links, pass in a component that wraps the Link:\n```js\nconst Linker = ({ href, children, ...props }) => (\n <NextLink href={href}>\n   <a {...props}>{children}</a>\n </NextLink>\n);\n<Button as={Linker} />\n```",
          "required": false,
          "type": {
            "name": "HTMLElement | React.Component"
          },
          "tags": {
            "type": "HTMLElement | React.Component",
            "default": "button"
          }
        }
      },
      "LgIdProps": {
        "data-lgid": {
          "name": "data-lgid",
          "defaultValue": null,
          "description": "LG test id passed to the component wrapper.",
          "required": false,
          "type": {
            "name": "`lg-${string}`"
          },
          "tags": {}
        }
      },
      "HTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "AnchorHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
      "AriaAttributes": "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes",
      "DOMAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
      "ButtonHTMLAttributes": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button"
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "getTestUtils",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  }
]