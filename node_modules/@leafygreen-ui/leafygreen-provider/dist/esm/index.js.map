{"version":3,"file":"index.js","sources":["../../src/DarkModeContext.tsx","../../src/PortalContext.tsx","../../src/TypographyContext.tsx","../../src/UsingKeyboardContext.tsx","../../src/LeafyGreenContext.tsx","../../src/PopoverContext/PopoverContext.tsx"],"sourcesContent":["import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getTheme, Theme } from '@leafygreen-ui/lib';\n\ninterface DarkModeContextProps {\n  contextDarkMode?: boolean;\n  setDarkMode: React.Dispatch<boolean>;\n}\n\nconst DarkModeContext = createContext<DarkModeContextProps>({\n  contextDarkMode: false,\n  setDarkMode: () => {},\n});\nexport const useDarkModeContext = () => useContext(DarkModeContext);\n\ntype useDarkMode = (localDarkMode?: boolean) => {\n  darkMode: boolean;\n  theme: Theme;\n  setDarkMode: React.Dispatch<boolean>;\n};\n\nexport const useDarkMode: useDarkMode = localDarkMode => {\n  const { contextDarkMode, setDarkMode } = useDarkModeContext();\n  const darkMode = localDarkMode ?? contextDarkMode ?? false;\n  const theme = getTheme(darkMode);\n  return { darkMode, theme, setDarkMode };\n};\n\nfunction DarkModeProvider({\n  children,\n  contextDarkMode,\n  setDarkMode,\n}: PropsWithChildren<DarkModeContextProps>) {\n  return (\n    <DarkModeContext.Provider\n      value={{\n        contextDarkMode,\n        setDarkMode,\n      }}\n    >\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n\nDarkModeProvider.displayName = 'DarkModeProvider';\n\nDarkModeProvider.propTypes = {\n  children: PropTypes.node,\n  contextDarkMode: PropTypes.bool,\n};\n\nexport default DarkModeProvider;\n","import React, { createContext, useContext } from 'react';\n\nexport interface PortalContextValues {\n  popover: {\n    portalContainer?: HTMLElement | null;\n    scrollContainer?: HTMLElement | null;\n  };\n}\n\nconst defaultPortalContextValues: PortalContextValues = {\n  popover: {\n    portalContainer: undefined,\n    scrollContainer: undefined,\n  },\n};\n\nconst PortalContext = createContext<PortalContextValues>(\n  defaultPortalContextValues,\n);\n\nexport function usePopoverPortalContainer() {\n  const { popover } = useContext(PortalContext);\n\n  return popover;\n}\n\ninterface PortalContext {\n  popover?: PortalContextValues['popover'];\n  children: React.ReactNode;\n}\n\nexport default function PortalContextProvider({\n  popover = defaultPortalContextValues.popover,\n  children,\n}: PortalContext) {\n  return (\n    <PortalContext.Provider value={{ popover }}>\n      {children}\n    </PortalContext.Provider>\n  );\n}\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\n// TODO: Refresh - update to 13 | 16\ntype FontSize = 14 | 16;\nexport interface TypographyProviderProps {\n  /**\n   * The base font size of all LeafyGreen components unless overridden.\n   */\n  baseFontSize?: FontSize;\n}\n\nconst BaseFontSizeContext = createContext<FontSize>(14);\n\nexport function useBaseFontSize() {\n  return useContext(BaseFontSizeContext);\n}\n\nfunction TypographyProvider({\n  children,\n  baseFontSize = 14,\n}: PropsWithChildren<TypographyProviderProps>) {\n  return (\n    <BaseFontSizeContext.Provider value={baseFontSize}>\n      {children}\n    </BaseFontSizeContext.Provider>\n  );\n}\n\nTypographyProvider.displayName = 'TypographyProvider';\n\nTypographyProvider.propTypes = {\n  children: PropTypes.node,\n  baseFontSize: PropTypes.number,\n};\n\nexport default TypographyProvider;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useEventListener } from '@leafygreen-ui/hooks';\n\ninterface UsingKeyboardState {\n  usingKeyboard: boolean;\n  setUsingKeyboard: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst initialState: UsingKeyboardState = {\n  usingKeyboard: true,\n  setUsingKeyboard: () => {},\n};\n\nexport const UsingKeyboardContext =\n  createContext<UsingKeyboardState>(initialState);\n\n// All keys here are used to manage focus through keyboard interaction.\nexport const NavigationKeyCodes: { readonly [k: string]: number } = {\n  tab: 9,\n  leftArrow: 37,\n  upArrow: 38,\n  rightArrow: 39,\n  downArrow: 40,\n} as const;\n\nexport function useUsingKeyboardContext(): UsingKeyboardState {\n  return useContext(UsingKeyboardContext);\n}\n\ninterface UsingKeyboardProviderProps {\n  children?: React.ReactNode;\n}\n\nfunction UsingKeyboardProvider({ children }: UsingKeyboardProviderProps) {\n  // Initialize `usingKeyboard` to true\n  // Defaulting to true allows autofocus to display a focus state.\n  const [usingKeyboard, setUsingKeyboard] = useState(\n    initialState.usingKeyboard,\n  );\n\n  // When the user uses the mouse, they're not using the keyboard\n  useEventListener('mousedown', () => setUsingKeyboard(false), {\n    enabled: usingKeyboard,\n  });\n\n  // When the user presses a navigation key, they are using the keyboard\n  useEventListener(\n    'keydown',\n    ({ keyCode }) => {\n      if (Object.values(NavigationKeyCodes).includes(keyCode)) {\n        setUsingKeyboard(true);\n      }\n    },\n    { enabled: !usingKeyboard },\n  );\n\n  const providerValue = useMemo(\n    () => ({\n      usingKeyboard,\n      setUsingKeyboard,\n    }),\n    [usingKeyboard],\n  );\n\n  return (\n    <UsingKeyboardContext.Provider value={providerValue}>\n      {children}\n    </UsingKeyboardContext.Provider>\n  );\n}\n\nUsingKeyboardProvider.displayName = 'UsingKeyboardProvider';\n\nUsingKeyboardProvider.propTypes = { children: PropTypes.node };\n\nexport default UsingKeyboardProvider;\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DarkModeProps } from '@leafygreen-ui/lib';\n\nimport DarkModeProvider, { useDarkModeContext } from './DarkModeContext';\nimport PortalContextProvider, {\n  PortalContextValues,\n  usePopoverPortalContainer,\n} from './PortalContext';\nimport TypographyProvider, {\n  TypographyProviderProps,\n  useBaseFontSize,\n} from './TypographyContext';\nimport UsingKeyboardProvider from './UsingKeyboardContext';\n\nexport type LeafyGreenProviderProps = {\n  /**\n   * Define a container HTMLElement for components that utilize the `Portal` component\n   */\n  popoverPortalContainer?: PortalContextValues['popover'];\n} & TypographyProviderProps &\n  DarkModeProps;\n\nfunction LeafyGreenProvider({\n  children,\n  baseFontSize: fontSizeProp,\n  popoverPortalContainer: popoverPortalContainerProp,\n  darkMode: darkModeProp,\n}: PropsWithChildren<LeafyGreenProviderProps>) {\n  // if the prop is set, we use that\n  // if the prop is not set, we use outer context\n  const { contextDarkMode: inheritedDarkMode } = useDarkModeContext();\n  const [darkModeState, setDarkMode] = useState(\n    darkModeProp ?? inheritedDarkMode,\n  );\n\n  useEffect(() => {\n    setDarkMode(darkModeProp ?? inheritedDarkMode);\n  }, [darkModeProp, inheritedDarkMode]);\n\n  // Similarly with base font size\n  const inheritedFontSize = useBaseFontSize();\n  const baseFontSize = fontSizeProp ?? inheritedFontSize;\n  // and popover portal container\n  const inheritedContainer = usePopoverPortalContainer();\n  const popoverPortalContainer =\n    popoverPortalContainerProp ?? inheritedContainer;\n\n  return (\n    <UsingKeyboardProvider>\n      <PortalContextProvider popover={popoverPortalContainer}>\n        <TypographyProvider baseFontSize={baseFontSize}>\n          <DarkModeProvider\n            contextDarkMode={darkModeState}\n            setDarkMode={setDarkMode}\n          >\n            {children}\n          </DarkModeProvider>\n        </TypographyProvider>\n      </PortalContextProvider>\n    </UsingKeyboardProvider>\n  );\n}\n\nLeafyGreenProvider.displayName = 'LeafyGreenProvider';\n\nLeafyGreenProvider.propTypes = {\n  popoverPortalContainer: PropTypes.shape({\n    popover: PropTypes.shape({\n      portalContainer: PropTypes.elementType,\n      scrollContainer: PropTypes.elementType,\n    }),\n  }),\n  baseFontSize: PropTypes.oneOf([14, 16]),\n  darkMode: PropTypes.bool,\n};\n\nexport default LeafyGreenProvider;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface PopoverState {\n  /**\n   * Whether the most immediate popover ancestor is open\n   */\n  isPopoverOpen: boolean;\n  /**\n   * Sets the internal state\n   * @internal\n   */\n  setIsPopoverOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PopoverContext = createContext<PopoverState>({\n  isPopoverOpen: false,\n  setIsPopoverOpen: () => {},\n});\n\n/**\n * Access the popover state\n * @returns `isPopoverOpen: boolean`\n */\nexport function usePopoverContext(): PopoverState {\n  return useContext(PopoverContext);\n}\n\ninterface PopoverProviderProps {\n  children?: React.ReactNode;\n}\n\n/**\n * Creates a Popover context.\n * Call `usePopoverContext` to access the popover state\n */\nexport function PopoverProvider({ children }: PopoverProviderProps) {\n  const [isPopoverOpen, setIsPopoverOpen] = useState<boolean>(false);\n\n  const providerValue = useMemo(\n    () => ({\n      isPopoverOpen,\n      setIsPopoverOpen,\n    }),\n    [isPopoverOpen],\n  );\n\n  return (\n    <PopoverContext.Provider value={providerValue}>\n      {children}\n    </PopoverContext.Provider>\n  );\n}\n\nPopoverProvider.displayName = 'PopoverProvider';\n\nPopoverProvider.propTypes = { children: PropTypes.node };\n"],"names":["DarkModeContext","createContext","contextDarkMode","setDarkMode","useDarkModeContext","useContext","useDarkMode","localDarkMode","_ref","_useDarkModeContext","darkMode","theme","getTheme","DarkModeProvider","_ref2","children","React","createElement","Provider","value","displayName","propTypes","PropTypes","node","bool","defaultPortalContextValues","popover","portalContainer","undefined","scrollContainer","PortalContext","usePopoverPortalContainer","PortalContextProvider","_ref$popover","BaseFontSizeContext","useBaseFontSize","TypographyProvider","_ref$baseFontSize","baseFontSize","number","initialState","usingKeyboard","setUsingKeyboard","UsingKeyboardContext","NavigationKeyCodes","tab","leftArrow","upArrow","rightArrow","downArrow","useUsingKeyboardContext","UsingKeyboardProvider","_useState2","_slicedToArray","useState","useEventListener","enabled","keyCode","Object","values","includes","providerValue","useMemo","LeafyGreenProvider","fontSizeProp","popoverPortalContainerProp","popoverPortalContainer","darkModeProp","inheritedDarkMode","darkModeState","useEffect","inheritedFontSize","inheritedContainer","shape","elementType","oneOf","PopoverContext","isPopoverOpen","setIsPopoverOpen","usePopoverContext","PopoverProvider"],"mappings":"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"}