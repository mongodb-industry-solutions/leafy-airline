{"version":3,"file":"index.js","sources":["../src/DarkModeContext.tsx","../src/PortalContext.tsx","../src/TypographyContext.tsx","../src/UsingKeyboardContext.tsx","../src/LeafyGreenContext.tsx","../src/PopoverContext/PopoverContext.tsx"],"sourcesContent":["import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getTheme, Theme } from '@leafygreen-ui/lib';\n\ninterface DarkModeContextProps {\n  contextDarkMode?: boolean;\n  setDarkMode: React.Dispatch<boolean>;\n}\n\nconst DarkModeContext = createContext<DarkModeContextProps>({\n  contextDarkMode: false,\n  setDarkMode: () => {},\n});\nexport const useDarkModeContext = () => useContext(DarkModeContext);\n\ntype useDarkMode = (localDarkMode?: boolean) => {\n  darkMode: boolean;\n  theme: Theme;\n  setDarkMode: React.Dispatch<boolean>;\n};\n\nexport const useDarkMode: useDarkMode = localDarkMode => {\n  const { contextDarkMode, setDarkMode } = useDarkModeContext();\n  const darkMode = localDarkMode ?? contextDarkMode ?? false;\n  const theme = getTheme(darkMode);\n  return { darkMode, theme, setDarkMode };\n};\n\nfunction DarkModeProvider({\n  children,\n  contextDarkMode,\n  setDarkMode,\n}: PropsWithChildren<DarkModeContextProps>) {\n  return (\n    <DarkModeContext.Provider\n      value={{\n        contextDarkMode,\n        setDarkMode,\n      }}\n    >\n      {children}\n    </DarkModeContext.Provider>\n  );\n}\n\nDarkModeProvider.displayName = 'DarkModeProvider';\n\nDarkModeProvider.propTypes = {\n  children: PropTypes.node,\n  contextDarkMode: PropTypes.bool,\n};\n\nexport default DarkModeProvider;\n","import React, { createContext, useContext } from 'react';\n\nexport interface PortalContextValues {\n  popover: {\n    portalContainer?: HTMLElement | null;\n    scrollContainer?: HTMLElement | null;\n  };\n}\n\nconst defaultPortalContextValues: PortalContextValues = {\n  popover: {\n    portalContainer: undefined,\n    scrollContainer: undefined,\n  },\n};\n\nconst PortalContext = createContext<PortalContextValues>(\n  defaultPortalContextValues,\n);\n\nexport function usePopoverPortalContainer() {\n  const { popover } = useContext(PortalContext);\n\n  return popover;\n}\n\ninterface PortalContext {\n  popover?: PortalContextValues['popover'];\n  children: React.ReactNode;\n}\n\nexport default function PortalContextProvider({\n  popover = defaultPortalContextValues.popover,\n  children,\n}: PortalContext) {\n  return (\n    <PortalContext.Provider value={{ popover }}>\n      {children}\n    </PortalContext.Provider>\n  );\n}\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\n// TODO: Refresh - update to 13 | 16\ntype FontSize = 14 | 16;\nexport interface TypographyProviderProps {\n  /**\n   * The base font size of all LeafyGreen components unless overridden.\n   */\n  baseFontSize?: FontSize;\n}\n\nconst BaseFontSizeContext = createContext<FontSize>(14);\n\nexport function useBaseFontSize() {\n  return useContext(BaseFontSizeContext);\n}\n\nfunction TypographyProvider({\n  children,\n  baseFontSize = 14,\n}: PropsWithChildren<TypographyProviderProps>) {\n  return (\n    <BaseFontSizeContext.Provider value={baseFontSize}>\n      {children}\n    </BaseFontSizeContext.Provider>\n  );\n}\n\nTypographyProvider.displayName = 'TypographyProvider';\n\nTypographyProvider.propTypes = {\n  children: PropTypes.node,\n  baseFontSize: PropTypes.number,\n};\n\nexport default TypographyProvider;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useEventListener } from '@leafygreen-ui/hooks';\n\ninterface UsingKeyboardState {\n  usingKeyboard: boolean;\n  setUsingKeyboard: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst initialState: UsingKeyboardState = {\n  usingKeyboard: true,\n  setUsingKeyboard: () => {},\n};\n\nexport const UsingKeyboardContext =\n  createContext<UsingKeyboardState>(initialState);\n\n// All keys here are used to manage focus through keyboard interaction.\nexport const NavigationKeyCodes: { readonly [k: string]: number } = {\n  tab: 9,\n  leftArrow: 37,\n  upArrow: 38,\n  rightArrow: 39,\n  downArrow: 40,\n} as const;\n\nexport function useUsingKeyboardContext(): UsingKeyboardState {\n  return useContext(UsingKeyboardContext);\n}\n\ninterface UsingKeyboardProviderProps {\n  children?: React.ReactNode;\n}\n\nfunction UsingKeyboardProvider({ children }: UsingKeyboardProviderProps) {\n  // Initialize `usingKeyboard` to true\n  // Defaulting to true allows autofocus to display a focus state.\n  const [usingKeyboard, setUsingKeyboard] = useState(\n    initialState.usingKeyboard,\n  );\n\n  // When the user uses the mouse, they're not using the keyboard\n  useEventListener('mousedown', () => setUsingKeyboard(false), {\n    enabled: usingKeyboard,\n  });\n\n  // When the user presses a navigation key, they are using the keyboard\n  useEventListener(\n    'keydown',\n    ({ keyCode }) => {\n      if (Object.values(NavigationKeyCodes).includes(keyCode)) {\n        setUsingKeyboard(true);\n      }\n    },\n    { enabled: !usingKeyboard },\n  );\n\n  const providerValue = useMemo(\n    () => ({\n      usingKeyboard,\n      setUsingKeyboard,\n    }),\n    [usingKeyboard],\n  );\n\n  return (\n    <UsingKeyboardContext.Provider value={providerValue}>\n      {children}\n    </UsingKeyboardContext.Provider>\n  );\n}\n\nUsingKeyboardProvider.displayName = 'UsingKeyboardProvider';\n\nUsingKeyboardProvider.propTypes = { children: PropTypes.node };\n\nexport default UsingKeyboardProvider;\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DarkModeProps } from '@leafygreen-ui/lib';\n\nimport DarkModeProvider, { useDarkModeContext } from './DarkModeContext';\nimport PortalContextProvider, {\n  PortalContextValues,\n  usePopoverPortalContainer,\n} from './PortalContext';\nimport TypographyProvider, {\n  TypographyProviderProps,\n  useBaseFontSize,\n} from './TypographyContext';\nimport UsingKeyboardProvider from './UsingKeyboardContext';\n\nexport type LeafyGreenProviderProps = {\n  /**\n   * Define a container HTMLElement for components that utilize the `Portal` component\n   */\n  popoverPortalContainer?: PortalContextValues['popover'];\n} & TypographyProviderProps &\n  DarkModeProps;\n\nfunction LeafyGreenProvider({\n  children,\n  baseFontSize: fontSizeProp,\n  popoverPortalContainer: popoverPortalContainerProp,\n  darkMode: darkModeProp,\n}: PropsWithChildren<LeafyGreenProviderProps>) {\n  // if the prop is set, we use that\n  // if the prop is not set, we use outer context\n  const { contextDarkMode: inheritedDarkMode } = useDarkModeContext();\n  const [darkModeState, setDarkMode] = useState(\n    darkModeProp ?? inheritedDarkMode,\n  );\n\n  useEffect(() => {\n    setDarkMode(darkModeProp ?? inheritedDarkMode);\n  }, [darkModeProp, inheritedDarkMode]);\n\n  // Similarly with base font size\n  const inheritedFontSize = useBaseFontSize();\n  const baseFontSize = fontSizeProp ?? inheritedFontSize;\n  // and popover portal container\n  const inheritedContainer = usePopoverPortalContainer();\n  const popoverPortalContainer =\n    popoverPortalContainerProp ?? inheritedContainer;\n\n  return (\n    <UsingKeyboardProvider>\n      <PortalContextProvider popover={popoverPortalContainer}>\n        <TypographyProvider baseFontSize={baseFontSize}>\n          <DarkModeProvider\n            contextDarkMode={darkModeState}\n            setDarkMode={setDarkMode}\n          >\n            {children}\n          </DarkModeProvider>\n        </TypographyProvider>\n      </PortalContextProvider>\n    </UsingKeyboardProvider>\n  );\n}\n\nLeafyGreenProvider.displayName = 'LeafyGreenProvider';\n\nLeafyGreenProvider.propTypes = {\n  popoverPortalContainer: PropTypes.shape({\n    popover: PropTypes.shape({\n      portalContainer: PropTypes.elementType,\n      scrollContainer: PropTypes.elementType,\n    }),\n  }),\n  baseFontSize: PropTypes.oneOf([14, 16]),\n  darkMode: PropTypes.bool,\n};\n\nexport default LeafyGreenProvider;\n","import React, { createContext, useContext, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport interface PopoverState {\n  /**\n   * Whether the most immediate popover ancestor is open\n   */\n  isPopoverOpen: boolean;\n  /**\n   * Sets the internal state\n   * @internal\n   */\n  setIsPopoverOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PopoverContext = createContext<PopoverState>({\n  isPopoverOpen: false,\n  setIsPopoverOpen: () => {},\n});\n\n/**\n * Access the popover state\n * @returns `isPopoverOpen: boolean`\n */\nexport function usePopoverContext(): PopoverState {\n  return useContext(PopoverContext);\n}\n\ninterface PopoverProviderProps {\n  children?: React.ReactNode;\n}\n\n/**\n * Creates a Popover context.\n * Call `usePopoverContext` to access the popover state\n */\nexport function PopoverProvider({ children }: PopoverProviderProps) {\n  const [isPopoverOpen, setIsPopoverOpen] = useState<boolean>(false);\n\n  const providerValue = useMemo(\n    () => ({\n      isPopoverOpen,\n      setIsPopoverOpen,\n    }),\n    [isPopoverOpen],\n  );\n\n  return (\n    <PopoverContext.Provider value={providerValue}>\n      {children}\n    </PopoverContext.Provider>\n  );\n}\n\nPopoverProvider.displayName = 'PopoverProvider';\n\nPopoverProvider.propTypes = { children: PropTypes.node };\n"],"names":["DarkModeContext","createContext","contextDarkMode","setDarkMode","useDarkModeContext","useContext","DarkModeProvider","_ref2","children","React","createElement","Provider","value","displayName","propTypes","PropTypes","default","node","bool","defaultPortalContextValues","popover","portalContainer","undefined","scrollContainer","PortalContext","usePopoverPortalContainer","PortalContextProvider","_ref","_ref$popover","BaseFontSizeContext","useBaseFontSize","TypographyProvider","_ref$baseFontSize","baseFontSize","number","initialState","usingKeyboard","setUsingKeyboard","UsingKeyboardContext","NavigationKeyCodes","tab","leftArrow","upArrow","rightArrow","downArrow","UsingKeyboardProvider","_useState2","_slicedToArray","useState","useEventListener","enabled","keyCode","Object","values","includes","providerValue","useMemo","LeafyGreenProvider","fontSizeProp","popoverPortalContainerProp","popoverPortalContainer","darkModeProp","darkMode","inheritedDarkMode","darkModeState","useEffect","inheritedFontSize","inheritedContainer","shape","elementType","oneOf","PopoverContext","isPopoverOpen","setIsPopoverOpen","PopoverProvider","localDarkMode","_useDarkModeContext","theme","getTheme"],"mappings":"2lBAGIA,EAA+BC,EAAAA,cAAc,CAC/CC,iBAAiB,EACjBC,YAAa,WAAyB,IAE7BC,EAAqB,WAC9B,OAAOC,EAAAA,WAAWL,EACpB,EAcA,SAASM,EAAiBC,GACxB,IAAIC,EAAWD,EAAMC,SACnBN,EAAkBK,EAAML,gBACxBC,EAAcI,EAAMJ,YACtB,OAAoBM,UAAMC,cAAcV,EAAgBW,SAAU,CAChEC,MAAO,CACLV,gBAAiBA,EACjBC,YAAaA,IAEdK,EACL,giCACAF,EAAiBO,YAAc,mBAC/BP,EAAiBQ,UAAY,CAC3BN,SAAUO,EAASC,QAACC,KACpBf,gBAAiBa,EAASC,QAACE,MCpC7B,IAAIC,EAA6B,CAC/BC,QAAS,CACPC,qBAAiBC,EACjBC,qBAAiBD,IAGjBE,EAA6BvB,EAAAA,cAAckB,GACxC,SAASM,IAGd,OAFkBpB,EAAUA,WAACmB,GACLJ,OAE1B,CACe,SAASM,EAAsBC,GAC5C,IAAIC,EAAeD,EAAKP,QACtBA,OAA2B,IAAjBQ,EAA0BT,EAA2BC,QAAUQ,EACzEpB,EAAWmB,EAAKnB,SAClB,OAAoBC,UAAMC,cAAcc,EAAcb,SAAU,CAC9DC,MAAO,CACLQ,QAASA,IAEVZ,EACL,CCjBA,IAAIqB,EAAmC5B,EAAAA,cAAc,IAC9C,SAAS6B,IACd,OAAOzB,EAAAA,WAAWwB,EACpB,CACA,SAASE,EAAmBJ,GAC1B,IAAInB,EAAWmB,EAAKnB,SAClBwB,EAAoBL,EAAKM,aACzBA,OAAqC,IAAtBD,EAA+B,GAAKA,EACrD,OAAoBvB,UAAMC,cAAcmB,EAAoBlB,SAAU,CACpEC,MAAOqB,GACNzB,EACL,CACAuB,EAAmBlB,YAAc,qBACjCkB,EAAmBjB,UAAY,CAC7BN,SAAUO,EAASC,QAACC,KACpBgB,aAAclB,EAASC,QAACkB,QChB1B,IAAIC,EAAe,CACjBC,eAAe,EACfC,iBAAkB,WAA8B,GAEvCC,EAAoCrC,EAAAA,cAAckC,GAGlDI,EAAqB,CAC9BC,IAAK,EACLC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,UAAW,IAKb,SAASC,EAAsBlB,GAC7B,IAAInB,EAAWmB,EAAKnB,SAIlBsC,EAAaC,EADCC,EAAAA,SAASb,EAAaC,eACG,GACvCA,EAAgBU,EAAW,GAC3BT,EAAmBS,EAAW,GAGhCG,EAAgBA,iBAAC,aAAa,WAC5B,OAAOZ,GAAiB,EAC5B,GAAK,CACDa,QAASd,IAIXa,mBAAiB,WAAW,SAAU1C,GACpC,IAAI4C,EAAU5C,EAAM4C,QAChBC,OAAOC,OAAOd,GAAoBe,SAASH,IAC7Cd,GAAiB,EAEvB,GAAK,CACDa,SAAUd,IAEZ,IAAImB,EAAgBC,EAAAA,SAAQ,WAC1B,MAAO,CACLpB,cAAeA,EACfC,iBAAkBA,EAExB,GAAK,CAACD,IACJ,OAAoB3B,UAAMC,cAAc4B,EAAqB3B,SAAU,CACrEC,MAAO2C,GACN/C,EACL,CChDA,SAASiD,EAAmB9B,GAC1B,IAAInB,EAAWmB,EAAKnB,SAClBkD,EAAe/B,EAAKM,aACpB0B,EAA6BhC,EAAKiC,uBAClCC,EAAelC,EAAKmC,SAIpBC,EADwB3D,IACgBF,gBAExC4C,EAAaC,EADCC,EAAQA,SAACa,QAAmDA,EAAeE,GAClD,GACvCC,EAAgBlB,EAAW,GAC3B3C,EAAc2C,EAAW,GAC3BmB,EAAAA,WAAU,WACR9D,EAAY0D,QAAmDA,EAAeE,EAClF,GAAK,CAACF,EAAcE,IAGlB,IAAIG,EAAoBpC,IACpBG,EAAeyB,QAAmDA,EAAeQ,EAEjFC,EAAqB1C,IACrBmC,EAAyBD,QAA+EA,EAA6BQ,EACzI,OAAoB1D,EAAAA,QAAMC,cAAcmC,EAAuB,KAAmBpC,EAAKO,QAACN,cAAcgB,EAAuB,CAC3HN,QAASwC,GACKnD,EAAKO,QAACN,cAAcqB,EAAoB,CACtDE,aAAcA,GACAxB,EAAKO,QAACN,cAAcJ,EAAkB,CACpDJ,gBAAiB8D,EACjB7D,YAAaA,GACZK,KACL,CDkBAqC,EAAsBhC,YAAc,wBACpCgC,EAAsB/B,UAAY,CAChCN,SAAUO,EAASC,QAACC,MCnBtBwC,EAAmB5C,YAAc,qBACjC4C,EAAmB3C,UAAY,CAC7B8C,uBAAwB7C,EAASC,QAACoD,MAAM,CACtChD,QAASL,EAASC,QAACoD,MAAM,CACvB/C,gBAAiBN,EAASC,QAACqD,YAC3B9C,gBAAiBR,EAASC,QAACqD,gBAG/BpC,aAAclB,EAAAA,QAAUuD,MAAM,CAAC,GAAI,KACnCR,SAAU/C,EAASC,QAACE,MC7CX,IAAAqD,EAA8BtE,EAAAA,cAAc,CACrDuE,eAAe,EACfC,iBAAkB,WAA8B,IAc3C,SAASC,EAAgB/C,GAC9B,IAAInB,EAAWmB,EAAKnB,SAElBsC,EAAaC,EADCC,EAAQA,UAAC,GACgB,GACvCwB,EAAgB1B,EAAW,GAC3B2B,EAAmB3B,EAAW,GAC5BS,EAAgBC,EAAAA,SAAQ,WAC1B,MAAO,CACLgB,cAAeA,EACfC,iBAAkBA,EAExB,GAAK,CAACD,IACJ,OAAoB/D,UAAMC,cAAc6D,EAAe5D,SAAU,CAC/DC,MAAO2C,GACN/C,EACL,CACAkE,EAAgB7D,YAAc,kBAC9B6D,EAAgB5D,UAAY,CAC1BN,SAAUO,EAASC,QAACC,qHL3BG,SAAqB0D,GAC5C,IAAIhD,EACAiD,EAAsBxE,IACxBF,EAAkB0E,EAAoB1E,gBACtCC,EAAcyE,EAAoBzE,YAChC2D,EAA6G,QAAjGnC,EAAOgD,QAAqDA,EAAgBzE,SAAsC,IAATyB,GAAkBA,EAE3I,MAAO,CACLmC,SAAUA,EACVe,MAHUC,WAAShB,GAInB3D,YAAaA,EAEjB,6CKVO,WACL,OAAOE,EAAAA,WAAWkE,EACpB,0DFIO,WACL,OAAOlE,EAAAA,WAAWiC,EACpB"}