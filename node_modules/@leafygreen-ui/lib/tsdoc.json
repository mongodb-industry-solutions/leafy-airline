[
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "createUniqueClassName",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Returns the text string of a React node",
    "methods": [],
    "displayName": "getNodeTextContent",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      },
      "Number": {
        "toFixed": {
          "name": "toFixed",
          "defaultValue": null,
          "description": "Returns a string representing a number in fixed-point notation.",
          "required": true,
          "type": {
            "name": "(fractionDigits?: number) => string"
          },
          "tags": {
            "param": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        },
        "toExponential": {
          "name": "toExponential",
          "defaultValue": null,
          "description": "Returns a string containing a number represented in exponential notation.",
          "required": true,
          "type": {
            "name": "(fractionDigits?: number) => string"
          },
          "tags": {
            "param": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        },
        "toPrecision": {
          "name": "toPrecision",
          "defaultValue": null,
          "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
          "required": true,
          "type": {
            "name": "(precision?: number) => string"
          },
          "tags": {
            "param": "precision Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        }
      },
      "Object": {
        "toLocaleString": {
          "name": "toLocaleString",
          "defaultValue": {},
          "description": "Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
            "value": [
              {
                "value": "() => string",
                "description": "Returns a date converted to a string using the current locale.",
                "fullComment": "Returns a date converted to a string using the current locale.",
                "tags": {}
              },
              {
                "value": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
                "description": "Converts a number to a string by using the current or specified locale.",
                "fullComment": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.\n@param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
                "tags": {
                  "param": "locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options.\nlocales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options."
                }
              }
            ]
          },
          "tags": {
            "param": "locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options.\nlocales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options."
          }
        }
      },
      "ReactElement": {
        "type": {
          "name": "type",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "string | JSXElementConstructor<any>",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "(props: any, deprecatedLegacyContext?: any) => ReactElement<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "new (props: any, deprecatedLegacyContext?: any) => Component<any, any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "props": {
          "name": "props",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "any"
          },
          "tags": {}
        }
      },
      "ReactPortal": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "arr `Array<any>`",
      "returns": "boolean"
    },
    "description": "Utility function that checks if the values in an array are all equal",
    "methods": [],
    "displayName": "allEqual",
    "props": {
      "Array": {
        "length": {
          "name": "length",
          "defaultValue": null,
          "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
          "required": true,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "toString": {
          "name": "toString",
          "defaultValue": {},
          "description": "Returns a string representation of an array.",
          "required": false,
          "type": {
            "name": "() => string"
          },
          "tags": {}
        },
        "toLocaleString": {
          "name": "toLocaleString",
          "defaultValue": {},
          "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
          "required": false,
          "type": {
            "name": "() => string"
          },
          "tags": {}
        },
        "pop": {
          "name": "pop",
          "defaultValue": null,
          "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
          "required": true,
          "type": {
            "name": "() => T"
          },
          "tags": {}
        },
        "push": {
          "name": "push",
          "defaultValue": null,
          "description": "Appends new elements to the end of an array, and returns the new length of the array.",
          "required": true,
          "type": {
            "name": "(...items: T[]) => number"
          },
          "tags": {
            "param": "items New elements to add to the array."
          }
        },
        "concat": {
          "name": "concat",
          "defaultValue": null,
          "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
          "required": true,
          "type": {
            "name": "{ (...items: ConcatArray<T>[]): T[]; (...items: (T | ConcatArray<T>)[]): T[]; }"
          },
          "tags": {
            "param": "items Additional arrays and/or items to add to the end of the array.\nitems Additional arrays and/or items to add to the end of the array."
          }
        },
        "join": {
          "name": "join",
          "defaultValue": null,
          "description": "Adds all the elements of an array into a string, separated by the specified separator string.",
          "required": true,
          "type": {
            "name": "(separator?: string) => string"
          },
          "tags": {
            "param": "separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
          }
        },
        "reverse": {
          "name": "reverse",
          "defaultValue": null,
          "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
          "required": true,
          "type": {
            "name": "() => T[]"
          },
          "tags": {}
        },
        "shift": {
          "name": "shift",
          "defaultValue": null,
          "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
          "required": true,
          "type": {
            "name": "() => T"
          },
          "tags": {}
        },
        "slice": {
          "name": "slice",
          "defaultValue": null,
          "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.",
          "required": true,
          "type": {
            "name": "(start?: number, end?: number) => T[]"
          },
          "tags": {
            "param": "start The beginning index of the specified portion of the array.\r\nIf start is undefined, then the slice begins at index 0.\nend The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\nIf end is undefined, then the slice extends to the end of the array."
          }
        },
        "sort": {
          "name": "sort",
          "defaultValue": null,
          "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
          "required": true,
          "type": {
            "name": "(compareFn?: (a: T, b: T) => number) => T[]"
          },
          "tags": {
            "param": "compareFn Function used to determine the order of the elements. It is expected to return\r\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\r\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n```ts\r\n[11,2,22,1].sort((a, b) => a - b)\r\n```"
          }
        },
        "splice": {
          "name": "splice",
          "defaultValue": null,
          "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
          "required": true,
          "type": {
            "name": "{ (start: number, deleteCount?: number): T[]; (start: number, deleteCount: number, ...items: T[]): T[]; }"
          },
          "tags": {
            "param": "start The zero-based location in the array from which to start removing elements.\ndeleteCount The number of elements to remove.\nstart The zero-based location in the array from which to start removing elements.\ndeleteCount The number of elements to remove.\nitems Elements to insert into the array in place of the deleted elements.",
            "returns": "An array containing the elements that were deleted.\nAn array containing the elements that were deleted."
          }
        },
        "unshift": {
          "name": "unshift",
          "defaultValue": null,
          "description": "Inserts new elements at the start of an array, and returns the new length of the array.",
          "required": true,
          "type": {
            "name": "(...items: T[]) => number"
          },
          "tags": {
            "param": "items Elements to insert at the start of the array."
          }
        },
        "indexOf": {
          "name": "indexOf",
          "defaultValue": null,
          "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
          "required": true,
          "type": {
            "name": "(searchElement: T, fromIndex?: number) => number"
          },
          "tags": {
            "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
          }
        },
        "lastIndexOf": {
          "name": "lastIndexOf",
          "defaultValue": null,
          "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
          "required": true,
          "type": {
            "name": "(searchElement: T, fromIndex?: number) => number"
          },
          "tags": {
            "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array."
          }
        },
        "every": {
          "name": "every",
          "defaultValue": null,
          "description": "Determines whether all the members of an array satisfy the specified test.",
          "required": true,
          "type": {
            "name": "{ <S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean; }"
          },
          "tags": {
            "param": "predicate A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array.\nthisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value.\npredicate A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array.\nthisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
          }
        },
        "some": {
          "name": "some",
          "defaultValue": null,
          "description": "Determines whether the specified callback function returns true for any element of an array.",
          "required": true,
          "type": {
            "name": "(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any) => boolean"
          },
          "tags": {
            "param": "predicate A function that accepts up to three arguments. The some method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value true, or until the end of the array.\nthisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
          }
        },
        "forEach": {
          "name": "forEach",
          "defaultValue": null,
          "description": "Performs the specified action for each element in an array.",
          "required": true,
          "type": {
            "name": "(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any) => void"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        },
        "map": {
          "name": "map",
          "defaultValue": null,
          "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
          "required": true,
          "type": {
            "name": "<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) => U[]"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        },
        "filter": {
          "name": "filter",
          "defaultValue": null,
          "description": "Returns the elements of an array that meet the condition specified in a callback function.",
          "required": true,
          "type": {
            "name": "{ <S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[]; (predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[]; }"
          },
          "tags": {
            "param": "predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\npredicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
          }
        },
        "reduce": {
          "name": "reduce",
          "defaultValue": null,
          "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "required": true,
          "type": {
            "name": "{ (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; }"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        },
        "reduceRight": {
          "name": "reduceRight",
          "defaultValue": null,
          "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "required": true,
          "type": {
            "name": "{ (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; }"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        },
        "find": {
          "name": "find",
          "defaultValue": null,
          "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
          "required": true,
          "type": {
            "name": "{ <S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S; (predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T; }"
          },
          "tags": {
            "param": "predicate find calls predicate once for each element of the array, in ascending\r\norder, until it finds one where predicate returns true. If such an element is found, find\r\nimmediately returns that element value. Otherwise, find returns undefined.\nthisArg If provided, it will be used as the this value for each invocation of\r\npredicate. If it is not provided, undefined is used instead."
          }
        },
        "findIndex": {
          "name": "findIndex",
          "defaultValue": null,
          "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
          "required": true,
          "type": {
            "name": "(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any) => number"
          },
          "tags": {
            "param": "predicate find calls predicate once for each element of the array, in ascending\r\norder, until it finds one where predicate returns true. If such an element is found,\r\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\nthisArg If provided, it will be used as the this value for each invocation of\r\npredicate. If it is not provided, undefined is used instead."
          }
        },
        "fill": {
          "name": "fill",
          "defaultValue": null,
          "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array",
          "required": true,
          "type": {
            "name": "(value: T, start?: number, end?: number) => T[]"
          },
          "tags": {
            "param": "value value to fill array section with\nstart index to start filling the array at. If start is negative, it is treated as\r\nlength+start where length is the length of the array.\nend index to stop filling the array at. If end is negative, it is treated as\r\nlength+end."
          }
        },
        "copyWithin": {
          "name": "copyWithin",
          "defaultValue": null,
          "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
          "required": true,
          "type": {
            "name": "(target: number, start: number, end?: number) => T[]"
          },
          "tags": {
            "param": "target If target is negative, it is treated as length+target where length is the\r\nlength of the array.\nstart If start is negative, it is treated as length+start. If end is negative, it\r\nis treated as length+end.\nend If not specified, length of the this object is used as its default value."
          }
        },
        "entries": {
          "name": "entries",
          "defaultValue": null,
          "description": "Returns an iterable of key, value pairs for every entry in the array",
          "required": true,
          "type": {
            "name": "() => IterableIterator<[number, T]>"
          },
          "tags": {}
        },
        "keys": {
          "name": "keys",
          "defaultValue": null,
          "description": "Returns an iterable of keys in the array",
          "required": true,
          "type": {
            "name": "() => IterableIterator<number>"
          },
          "tags": {}
        },
        "values": {
          "name": "values",
          "defaultValue": null,
          "description": "Returns an iterable of values in the array",
          "required": true,
          "type": {
            "name": "() => IterableIterator<T>"
          },
          "tags": {}
        },
        "includes": {
          "name": "includes",
          "defaultValue": null,
          "description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
          "required": true,
          "type": {
            "name": "(searchElement: T, fromIndex?: number) => boolean"
          },
          "tags": {
            "param": "searchElement The element to search for.\nfromIndex The position in this array at which to begin searching for searchElement."
          }
        },
        "flatMap": {
          "name": "flatMap",
          "defaultValue": null,
          "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.",
          "required": true,
          "type": {
            "name": "<U, This = undefined>(callback: (this: This, value: T, index: number, array: T[]) => U | readonly U[], thisArg?: This) => U[]"
          },
          "tags": {
            "param": "callback A function that accepts up to three arguments. The flatMap method calls the\r\ncallback function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callback function. If\r\nthisArg is omitted, undefined is used as the this value."
          }
        },
        "flat": {
          "name": "flat",
          "defaultValue": null,
          "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.",
          "required": true,
          "type": {
            "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
          },
          "tags": {
            "param": "depth The maximum recursion depth"
          }
        },
        "__@iterator@11": {
          "name": "__@iterator@11",
          "defaultValue": null,
          "description": "Iterator",
          "required": true,
          "type": {
            "name": "() => IterableIterator<T>"
          },
          "tags": {}
        },
        "__@unscopables@3680": {
          "name": "__@unscopables@3680",
          "defaultValue": null,
          "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
          "required": true,
          "type": {
            "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
          },
          "tags": {}
        }
      },
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => T"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "",
    "methods": [],
    "displayName": "cloneReverse",
    "props": {
      "Array": {
        "length": {
          "name": "length",
          "defaultValue": null,
          "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
          "required": true,
          "type": {
            "name": "number"
          },
          "tags": {}
        },
        "toString": {
          "name": "toString",
          "defaultValue": {},
          "description": "Returns a string representation of an array.",
          "required": false,
          "type": {
            "name": "() => string"
          },
          "tags": {}
        },
        "toLocaleString": {
          "name": "toLocaleString",
          "defaultValue": {},
          "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
          "required": false,
          "type": {
            "name": "() => string"
          },
          "tags": {}
        },
        "pop": {
          "name": "pop",
          "defaultValue": null,
          "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
          "required": true,
          "type": {
            "name": "() => T"
          },
          "tags": {}
        },
        "push": {
          "name": "push",
          "defaultValue": null,
          "description": "Appends new elements to the end of an array, and returns the new length of the array.",
          "required": true,
          "type": {
            "name": "(...items: T[]) => number"
          },
          "tags": {
            "param": "items New elements to add to the array."
          }
        },
        "concat": {
          "name": "concat",
          "defaultValue": null,
          "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
          "required": true,
          "type": {
            "name": "{ (...items: ConcatArray<T>[]): T[]; (...items: (T | ConcatArray<T>)[]): T[]; }"
          },
          "tags": {
            "param": "items Additional arrays and/or items to add to the end of the array.\nitems Additional arrays and/or items to add to the end of the array."
          }
        },
        "join": {
          "name": "join",
          "defaultValue": null,
          "description": "Adds all the elements of an array into a string, separated by the specified separator string.",
          "required": true,
          "type": {
            "name": "(separator?: string) => string"
          },
          "tags": {
            "param": "separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
          }
        },
        "reverse": {
          "name": "reverse",
          "defaultValue": null,
          "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
          "required": true,
          "type": {
            "name": "() => T[]"
          },
          "tags": {}
        },
        "shift": {
          "name": "shift",
          "defaultValue": null,
          "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
          "required": true,
          "type": {
            "name": "() => T"
          },
          "tags": {}
        },
        "slice": {
          "name": "slice",
          "defaultValue": null,
          "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.",
          "required": true,
          "type": {
            "name": "(start?: number, end?: number) => T[]"
          },
          "tags": {
            "param": "start The beginning index of the specified portion of the array.\r\nIf start is undefined, then the slice begins at index 0.\nend The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\r\nIf end is undefined, then the slice extends to the end of the array."
          }
        },
        "sort": {
          "name": "sort",
          "defaultValue": null,
          "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
          "required": true,
          "type": {
            "name": "(compareFn?: (a: T, b: T) => number) => T[]"
          },
          "tags": {
            "param": "compareFn Function used to determine the order of the elements. It is expected to return\r\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\r\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\r\n```ts\r\n[11,2,22,1].sort((a, b) => a - b)\r\n```"
          }
        },
        "splice": {
          "name": "splice",
          "defaultValue": null,
          "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
          "required": true,
          "type": {
            "name": "{ (start: number, deleteCount?: number): T[]; (start: number, deleteCount: number, ...items: T[]): T[]; }"
          },
          "tags": {
            "param": "start The zero-based location in the array from which to start removing elements.\ndeleteCount The number of elements to remove.\nstart The zero-based location in the array from which to start removing elements.\ndeleteCount The number of elements to remove.\nitems Elements to insert into the array in place of the deleted elements.",
            "returns": "An array containing the elements that were deleted.\nAn array containing the elements that were deleted."
          }
        },
        "unshift": {
          "name": "unshift",
          "defaultValue": null,
          "description": "Inserts new elements at the start of an array, and returns the new length of the array.",
          "required": true,
          "type": {
            "name": "(...items: T[]) => number"
          },
          "tags": {
            "param": "items Elements to insert at the start of the array."
          }
        },
        "indexOf": {
          "name": "indexOf",
          "defaultValue": null,
          "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
          "required": true,
          "type": {
            "name": "(searchElement: T, fromIndex?: number) => number"
          },
          "tags": {
            "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
          }
        },
        "lastIndexOf": {
          "name": "lastIndexOf",
          "defaultValue": null,
          "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
          "required": true,
          "type": {
            "name": "(searchElement: T, fromIndex?: number) => number"
          },
          "tags": {
            "param": "searchElement The value to locate in the array.\nfromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array."
          }
        },
        "every": {
          "name": "every",
          "defaultValue": null,
          "description": "Determines whether all the members of an array satisfy the specified test.",
          "required": true,
          "type": {
            "name": "{ <S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean; }"
          },
          "tags": {
            "param": "predicate A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array.\nthisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value.\npredicate A function that accepts up to three arguments. The every method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value false, or until the end of the array.\nthisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
          }
        },
        "some": {
          "name": "some",
          "defaultValue": null,
          "description": "Determines whether the specified callback function returns true for any element of an array.",
          "required": true,
          "type": {
            "name": "(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any) => boolean"
          },
          "tags": {
            "param": "predicate A function that accepts up to three arguments. The some method calls\r\nthe predicate function for each element in the array until the predicate returns a value\r\nwhich is coercible to the Boolean value true, or until the end of the array.\nthisArg An object to which the this keyword can refer in the predicate function.\r\nIf thisArg is omitted, undefined is used as the this value."
          }
        },
        "forEach": {
          "name": "forEach",
          "defaultValue": null,
          "description": "Performs the specified action for each element in an array.",
          "required": true,
          "type": {
            "name": "(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any) => void"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        },
        "map": {
          "name": "map",
          "defaultValue": null,
          "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
          "required": true,
          "type": {
            "name": "<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any) => U[]"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        },
        "filter": {
          "name": "filter",
          "defaultValue": null,
          "description": "Returns the elements of an array that meet the condition specified in a callback function.",
          "required": true,
          "type": {
            "name": "{ <S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[]; (predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[]; }"
          },
          "tags": {
            "param": "predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\npredicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
          }
        },
        "reduce": {
          "name": "reduce",
          "defaultValue": null,
          "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "required": true,
          "type": {
            "name": "{ (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; }"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        },
        "reduceRight": {
          "name": "reduceRight",
          "defaultValue": null,
          "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
          "required": true,
          "type": {
            "name": "{ (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T; (callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T; <U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U; }"
          },
          "tags": {
            "param": "callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\ncallbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\ninitialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        },
        "find": {
          "name": "find",
          "defaultValue": null,
          "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
          "required": true,
          "type": {
            "name": "{ <S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S; (predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T; }"
          },
          "tags": {
            "param": "predicate find calls predicate once for each element of the array, in ascending\r\norder, until it finds one where predicate returns true. If such an element is found, find\r\nimmediately returns that element value. Otherwise, find returns undefined.\nthisArg If provided, it will be used as the this value for each invocation of\r\npredicate. If it is not provided, undefined is used instead."
          }
        },
        "findIndex": {
          "name": "findIndex",
          "defaultValue": null,
          "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
          "required": true,
          "type": {
            "name": "(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any) => number"
          },
          "tags": {
            "param": "predicate find calls predicate once for each element of the array, in ascending\r\norder, until it finds one where predicate returns true. If such an element is found,\r\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\nthisArg If provided, it will be used as the this value for each invocation of\r\npredicate. If it is not provided, undefined is used instead."
          }
        },
        "fill": {
          "name": "fill",
          "defaultValue": null,
          "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array",
          "required": true,
          "type": {
            "name": "(value: T, start?: number, end?: number) => T[]"
          },
          "tags": {
            "param": "value value to fill array section with\nstart index to start filling the array at. If start is negative, it is treated as\r\nlength+start where length is the length of the array.\nend index to stop filling the array at. If end is negative, it is treated as\r\nlength+end."
          }
        },
        "copyWithin": {
          "name": "copyWithin",
          "defaultValue": null,
          "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
          "required": true,
          "type": {
            "name": "(target: number, start: number, end?: number) => T[]"
          },
          "tags": {
            "param": "target If target is negative, it is treated as length+target where length is the\r\nlength of the array.\nstart If start is negative, it is treated as length+start. If end is negative, it\r\nis treated as length+end.\nend If not specified, length of the this object is used as its default value."
          }
        },
        "entries": {
          "name": "entries",
          "defaultValue": null,
          "description": "Returns an iterable of key, value pairs for every entry in the array",
          "required": true,
          "type": {
            "name": "() => IterableIterator<[number, T]>"
          },
          "tags": {}
        },
        "keys": {
          "name": "keys",
          "defaultValue": null,
          "description": "Returns an iterable of keys in the array",
          "required": true,
          "type": {
            "name": "() => IterableIterator<number>"
          },
          "tags": {}
        },
        "values": {
          "name": "values",
          "defaultValue": null,
          "description": "Returns an iterable of values in the array",
          "required": true,
          "type": {
            "name": "() => IterableIterator<T>"
          },
          "tags": {}
        },
        "includes": {
          "name": "includes",
          "defaultValue": null,
          "description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
          "required": true,
          "type": {
            "name": "(searchElement: T, fromIndex?: number) => boolean"
          },
          "tags": {
            "param": "searchElement The element to search for.\nfromIndex The position in this array at which to begin searching for searchElement."
          }
        },
        "flatMap": {
          "name": "flatMap",
          "defaultValue": null,
          "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.",
          "required": true,
          "type": {
            "name": "<U, This = undefined>(callback: (this: This, value: T, index: number, array: T[]) => U | readonly U[], thisArg?: This) => U[]"
          },
          "tags": {
            "param": "callback A function that accepts up to three arguments. The flatMap method calls the\r\ncallback function one time for each element in the array.\nthisArg An object to which the this keyword can refer in the callback function. If\r\nthisArg is omitted, undefined is used as the this value."
          }
        },
        "flat": {
          "name": "flat",
          "defaultValue": null,
          "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.",
          "required": true,
          "type": {
            "name": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]"
          },
          "tags": {
            "param": "depth The maximum recursion depth"
          }
        },
        "__@iterator@11": {
          "name": "__@iterator@11",
          "defaultValue": null,
          "description": "Iterator",
          "required": true,
          "type": {
            "name": "() => IterableIterator<T>"
          },
          "tags": {}
        },
        "__@unscopables@3680": {
          "name": "__@unscopables@3680",
          "defaultValue": null,
          "description": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
          "required": true,
          "type": {
            "name": "() => { copyWithin: boolean; entries: boolean; fill: boolean; find: boolean; findIndex: boolean; keys: boolean; values: boolean; }"
          },
          "tags": {}
        }
      },
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => T"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "name Name of element we want to reference.",
      "deprecated": ""
    },
    "description": "Utility for making it easier to couple a React Component to a css selector.\nUseful when writing css selectors that rely on interactivity, i.e. :hover.\nExample:\n const checkBoxWrapper = createDataProp('checkbox-wrapper');\n // Used as selector:\n css`&:hover ${checkboxWrapper.selector} { }`\n // Used on React Component\n <div {...checkboxWrapper.prop} />",
    "methods": [],
    "displayName": "createDataProp",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {},
    "description": "Returns the text string of a React node",
    "methods": [],
    "displayName": "LeafygreenUiLib",
    "props": {
      "String": "",
      "RelativeIndexable": {
        "at": {
          "name": "at",
          "defaultValue": null,
          "description": "Takes an integer value and returns the item at that index,\nallowing for positive and negative integers.\nNegative integers count back from the last item in the array.",
          "required": true,
          "type": {
            "name": "(index: number) => string"
          },
          "tags": {}
        }
      },
      "Number": {
        "toFixed": {
          "name": "toFixed",
          "defaultValue": null,
          "description": "Returns a string representing a number in fixed-point notation.",
          "required": true,
          "type": {
            "name": "(fractionDigits?: number) => string"
          },
          "tags": {
            "param": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        },
        "toExponential": {
          "name": "toExponential",
          "defaultValue": null,
          "description": "Returns a string containing a number represented in exponential notation.",
          "required": true,
          "type": {
            "name": "(fractionDigits?: number) => string"
          },
          "tags": {
            "param": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        },
        "toPrecision": {
          "name": "toPrecision",
          "defaultValue": null,
          "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
          "required": true,
          "type": {
            "name": "(precision?: number) => string"
          },
          "tags": {
            "param": "precision Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        }
      },
      "Object": {
        "toLocaleString": {
          "name": "toLocaleString",
          "defaultValue": {},
          "description": "Returns a date converted to a string using the current locale.\nConverts a number to a string by using the current or specified locale.",
          "required": false,
          "type": {
            "name": "enum",
            "raw": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
            "value": [
              {
                "value": "() => string",
                "description": "Returns a date converted to a string using the current locale.",
                "fullComment": "Returns a date converted to a string using the current locale.",
                "tags": {}
              },
              {
                "value": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
                "description": "Converts a number to a string by using the current or specified locale.",
                "fullComment": "Converts a number to a string by using the current or specified locale.\n@param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.\n@param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n@param options An object that contains one or more properties that specify comparison options.",
                "tags": {
                  "param": "locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options.\nlocales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options."
                }
              }
            ]
          },
          "tags": {
            "param": "locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options.\nlocales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\noptions An object that contains one or more properties that specify comparison options."
          }
        }
      },
      "ReactElement": {
        "type": {
          "name": "type",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "string | JSXElementConstructor<any>",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "(props: any, deprecatedLegacyContext?: any) => ReactElement<any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "new (props: any, deprecatedLegacyContext?: any) => Component<any, any, any>",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        },
        "props": {
          "name": "props",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "any"
          },
          "tags": {}
        }
      },
      "ReactPortal": {
        "children": {
          "name": "children",
          "defaultValue": null,
          "description": "",
          "required": true,
          "type": {
            "name": "enum",
            "raw": "ReactNode",
            "value": [
              {
                "value": "string"
              },
              {
                "value": "number"
              },
              {
                "value": "false"
              },
              {
                "value": "true"
              },
              {
                "value": "ReactElement<any, string | JSXElementConstructor<any>>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "Iterable<ReactNode>",
                "description": "",
                "fullComment": "",
                "tags": {}
              },
              {
                "value": "ReactPortal",
                "description": "",
                "fullComment": "",
                "tags": {}
              }
            ]
          },
          "tags": {}
        }
      }
    }
  },
  {
    "tags": {
      "param": "darkMode",
      "returns": "`Theme.Dark || Theme.Light`"
    },
    "description": "\nGiven a `darkMode` boolean, returns a `Theme` value - either dark or light.",
    "methods": [],
    "displayName": "getTheme",
    "props": {
      "Boolean": {
        "valueOf": {
          "name": "valueOf",
          "defaultValue": {},
          "description": "Returns the primitive value of the specified object.",
          "required": false,
          "type": {
            "name": "() => boolean"
          },
          "tags": {}
        }
      }
    }
  }
]