import { ChangeEventHandler, MutableRefObject } from 'react';
interface ControlledValueReturnObject<T extends any> {
    /** Whether the value is controlled */
    isControlled: boolean;
    /** The controlled or uncontrolled value */
    value: T;
    /** A ChangeEventHandler to assign to any onChange event */
    handleChange: ChangeEventHandler<any>;
    /**
     * A setter for the internal value.
     * Does not change the controlled value if the provided value has not changed.
     * Prefer using `updateValue` to programmatically set the value.
     * @internal
     */
    setUncontrolledValue: React.Dispatch<React.SetStateAction<T>>;
    /**
     * Synthetically triggers a change event within the `handleChange` callback.
     * Signals that the value should change for controlled components,
     * and updates the internal value for uncontrolled components
     */
    updateValue: (newVal: T, ref: MutableRefObject<any>) => void;
}
/**
 * A hook that enables a component to be both controlled or uncontrolled.
 *
 * Returns a {@link ControlledValueReturnObject} with the controlled or uncontrolled `value`,
 * `onChange` & `onClear` handlers, a `setInternalValue` setter, and a boolean `isControlled`
 */
export declare const useControlledValue: <T>(controlledValue?: T | undefined, changeHandler?: ChangeEventHandler<any> | null, initialValue?: T | undefined) => ControlledValueReturnObject<T | undefined>;
export {};
//# sourceMappingURL=useControlledValue.d.ts.map